{"version":3,"sources":["contexts/TimetableContext.tsx","utils/TimeUtils.ts","components/EventItem.tsx","utils/TimetableUtils.ts","components/DayColumn.tsx","components/Timetable.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimetableStateContext","createContext","useTimetableState","useContext","unixEpoch","year","month","date","setOnly","day","hour","min","sec","ms","set","setDay","hours","minutes","seconds","milliseconds","getTimeOfDay","toDate","differenceInMinutesOfDay","dateLeft","dateRight","options","left","right","differenceInMinutes","getFullYear","getMonth","getDate","EventItem","info","leftPercent","widthPercent","timeStart","minutesPerVertUnit","vertUnit","time","start","end","top","useMemo","height","console","log","sizeToString","value","unit","expandWidth","ev","iCol","columns","colSpan","i","length","col","j","ev1","areIntervalsOverlapping","DayColumn","events","timeEnd","eventGroups","subCols","lastEventEnding","sort","e1","e2","forEach","push","placed","some","map","subCol","subColIdx","id","minutePrecision","nearestTo","defaultDays","TimetableWrapper","styled","div","maxHeight","Wrapper","Timetable","courses","weekStartOnSunday","minutesPerCell","cellHeight","days","dayColumns","Array","course","intervals","intvl","isSameDay","isBefore","RangeError","getDay","mapCourseToDayOfWeek","roundedStart","roundToNearestMinutes","roundedEnd","timemarks","eachMinuteOfInterval","step","totalHeight","shift","timetableState","Provider","className","Header","Timeline","Grid","rowCount","columnCount","format","cells","cols","EventGrid","timetableDefaultConfig","mockCourses","name","color","App","useState","href","target","rel","icon","faGithub","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e078dfca.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\nimport { TimetableState } from \"../types\";\r\n\r\nexport const TimetableStateContext = createContext<TimetableState | null>(null);\r\n\r\n// If this is null, then you forgot to set value for `TimetableStateContext.Provider`\r\nexport const useTimetableState = (): TimetableState =>\r\n  useContext(TimetableStateContext)!;\r\n","import { set, setDay, differenceInMinutes, toDate, compareAsc } from \"date-fns\";\r\n\r\nconst unixEpoch = { year: 1970, month: 0, date: 1 };\r\n\r\n/**\r\n * Shorthand for `new Date(0)`, [`setDay()`](https://date-fns.org/v2.25.0/docs/setDay)\r\n * and [`set()`](https://date-fns.org/v2.25.0/docs/set)\r\n * @returns Date\r\n */\r\nexport function setOnly({\r\n  day,\r\n  hour,\r\n  min,\r\n  sec,\r\n  ms,\r\n}: {\r\n  day?: number;\r\n  hour?: number;\r\n  min?: number;\r\n  sec?: number;\r\n  ms?: number;\r\n}) {\r\n  return set(day != null ? setDay(0, day) : 0, {\r\n    hours: hour,\r\n    minutes: min,\r\n    seconds: sec,\r\n    milliseconds: ms,\r\n  });\r\n}\r\n\r\n/**\r\n * Get the Date object with year, month, date as to Unix Epoch\r\n * @param date - the given date\r\n */\r\nexport function getTimeOfDay(date: Date | number) {\r\n  return set(toDate(date), unixEpoch);\r\n}\r\n\r\n/**\r\n * Get the signed number of full (rounded towards 0) minutes between the given time of day.\r\n * This means that year, month and date are removed.\r\n * @param dateLeft - the later date\r\n * @param dateRight - the earlier date\r\n * @param options - see [differenceInMinutes](https://date-fns.org/v2.25.0/docs/differenceInMinutes)\r\n */\r\nexport function differenceInMinutesOfDay(\r\n  dateLeft: Date | number,\r\n  dateRight: Date | number,\r\n  options?: { roundingMethod: string }\r\n) {\r\n  const left = toDate(dateLeft);\r\n  const right = toDate(dateRight);\r\n  return differenceInMinutes(\r\n    left,\r\n    set(right, {\r\n      year: left.getFullYear(),\r\n      month: left.getMonth(),\r\n      date: left.getDate(),\r\n    }),\r\n    options\r\n  );\r\n}\r\n\r\n/**\r\n * Is the given time within the interval (ignoring date).\r\n * @param time - the time to check.\r\n * @param interval - the interval to check.\r\n */\r\nexport function isWithinTimeInterval(time: Date | number, interval: Interval) {\r\n  const startTime = toDate(interval.start);\r\n  const date = {\r\n    year: startTime.getFullYear(),\r\n    month: startTime.getMonth(),\r\n    date: startTime.getDate(),\r\n  };\r\n  const endTime = set(interval.end, date);\r\n  const dirtyTime = set(time, date);\r\n  if (startTime >= endTime) {\r\n    endTime.setDate(endTime.getDate() + 1);\r\n  }\r\n  return dirtyTime >= startTime && dirtyTime <= endTime;\r\n}\r\n\r\n/**\r\n * Compare the two times (ignoring dates) and return 1 if the first date is after the second, \r\n * -1 if the first date is before the second or 0 if dates are equal.\r\n * @see https://date-fns.org/v2.25.0/docs/compareAsc\r\n */\r\nexport function compareAscTime(\r\n  dateLeft: Date | number,\r\n  dateRight: Date | number\r\n) {\r\n  const left = toDate(dateLeft);\r\n  const right = toDate(dateRight);\r\n  return compareAsc(\r\n    dateLeft,\r\n    set(right, {\r\n      year: left.getFullYear(),\r\n      month: left.getMonth(),\r\n      date: left.getDate(),\r\n    })\r\n  );\r\n}\r\n\r\n","import { useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTimetableState } from \"../contexts/TimetableContext\";\r\nimport { CourseEvent } from \"../types\";\r\nimport { differenceInMinutesOfDay } from \"../utils/TimeUtils\";\r\n\r\nexport default function EventItem({\r\n  info,\r\n  leftPercent,\r\n  widthPercent,\r\n}: {\r\n  info: CourseEvent;\r\n  leftPercent: number;\r\n  widthPercent: number;\r\n}) {\r\n  const { timeStart, minutesPerVertUnit, vertUnit } =\r\n    useTimetableState();\r\n  const { start, end } = info.time;\r\n\r\n  const top = useMemo(\r\n    () => differenceInMinutesOfDay(start, timeStart) / minutesPerVertUnit!,\r\n    [start, timeStart, minutesPerVertUnit]\r\n  );\r\n  const height = useMemo(\r\n    () => differenceInMinutesOfDay(end, start) / minutesPerVertUnit!,\r\n    [end, start, minutesPerVertUnit]\r\n  );\r\n\r\n  console.log(info);\r\n  console.log(leftPercent);\r\n  console.log(widthPercent);\r\n  console.log(top, height);\r\n\r\n  return <div></div>;\r\n}\r\n\r\n// function timeIntervalToX(\r\n//   interval: Interval,\r\n//   clampInterval: Interval,\r\n//   minutesPerY: number,\r\n//   verticalUnit: string\r\n// ) {\r\n//   if (\r\n//     !isWithinTimeInterval(interval.start, clampInterval) &&\r\n//     !isWithinTimeInterval(interval.end, clampInterval)\r\n//   )\r\n//     return null;\r\n//   const { start, end } = interval;\r\n//   const { start: clampStart } = clampInterval;\r\n//   const top = differenceInMinutesOfDay(start, clampStart) / minutesPerY;\r\n//   const height = differenceInMinutesOfDay(end, start) / minutesPerY;\r\n//   return {\r\n//     top: { value: top, unit: verticalUnit },\r\n//     height: { value: height, unit: verticalUnit },\r\n//   };\r\n// }\r\n","import { Size, Course, CourseEvent } from \"../types\";\r\nimport { areIntervalsOverlapping, getDay, isBefore, isSameDay } from \"date-fns\";\r\n\r\nexport function sizeToString({ value, unit }: Size) {\r\n  return `${value}${unit}`;\r\n}\r\n\r\n/**\r\n * Sort classes into days of the week, with Sunday is 0, Monday is 1...\r\n */\r\nexport function mapCourseToDayOfWeek(courses: Course[]) {\r\n  const events: CourseEvent[][] = [...Array(7)].map(() => []);\r\n  for (let course of courses) {\r\n    const { intervals, info } = course;\r\n    for (let intvl of intervals) {\r\n      const { start, end } = intvl;\r\n      if (!isSameDay(start, end) || !isBefore(start, end))\r\n        throw new RangeError(\"Invalid course interval\");\r\n      events[getDay(start)].push({ time: intvl, info: info });\r\n    }\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * Checks how many columns the event can expand into, without colliding with other events.\r\n * @param ev\r\n * @param iCol\r\n * @param columns\r\n * @returns\r\n */\r\nexport function expandWidth(\r\n  ev: CourseEvent,\r\n  iCol: number,\r\n  columns: CourseEvent[][]\r\n) {\r\n  let colSpan = 1;\r\n  for (let i = iCol + 1; i < columns.length; i++) {\r\n    const col = columns[i];\r\n    for (let j = 0; j < col.length; j++) {\r\n      const ev1 = col[j];\r\n      if (areIntervalsOverlapping(ev.time, ev1.time)) return colSpan;\r\n      colSpan++;\r\n    }\r\n  }\r\n  return colSpan;\r\n}\r\n","import \"../styles/EventGrid.scss\";\r\nimport EventItem from \"./EventItem\";\r\nimport { CourseEvent } from \"../types\";\r\nimport { getTimeOfDay } from \"../utils/TimeUtils\";\r\nimport { expandWidth } from \"../utils/TimetableUtils\";\r\nimport { useTimetableState } from \"../contexts/TimetableContext\";\r\nimport { areIntervalsOverlapping } from \"date-fns\";\r\n\r\n/**\r\n * Each `DayColumn` represent a day of week (i.e. Monday, Tuesday, ...)\r\n * @see [Algorithm to layout events with maximum width](https://stackoverflow.com/q/11311410/12405558)\r\n */\r\nexport default function DayColumn({ events }: { events: CourseEvent[] }) {\r\n  const { timeStart, timeEnd } = useTimetableState();\r\n\r\n  // Each group contains columns of events that overlap.\r\n  const eventGroups: CourseEvent[][][] = [];\r\n  // Each column contains events that do not overlap.\r\n  let subCols: CourseEvent[][] = [];\r\n  let lastEventEnding: Date | number | null = null;\r\n  // Place each event into a column within an event group.\r\n  events\r\n    .sort(({ time: e1 }, { time: e2 }) => {\r\n      if (e1.start < e2.start) return -1;\r\n      if (e1.start > e2.start) return 1;\r\n      if (e1.end < e2.end) return -1;\r\n      if (e1.end > e2.end) return 1;\r\n      return 0;\r\n    })\r\n    .forEach((ev) => {\r\n      // Check if a new event group needs to be started.\r\n      if (lastEventEnding != null && ev.time.start >= lastEventEnding) {\r\n        // The event is later than any of the events in the\r\n        // current group. There is no overlap. Output the\r\n        // current event group and start a new one.\r\n        eventGroups.push(subCols);\r\n        // Reset\r\n        subCols = [];\r\n        lastEventEnding = null;\r\n      }\r\n\r\n      // Try to place the event inside an existing column.\r\n      let placed = false;\r\n      subCols.some((col) => {\r\n        if (!areIntervalsOverlapping(col[col.length - 1].time, ev.time)) {\r\n          col.push(ev);\r\n          placed = true;\r\n        }\r\n        return placed;\r\n      });\r\n\r\n      // It was not possible to place the event. Add a new column\r\n      // for the current event group.\r\n      if (!placed) subCols.push([ev]);\r\n\r\n      // Remember the latest event end time of the current group.\r\n      // This is later used to determine if a new groups starts.\r\n      if (lastEventEnding == null || ev.time.end > lastEventEnding)\r\n        lastEventEnding = ev.time.end;\r\n    });\r\n  eventGroups.push(subCols);\r\n  return (\r\n    <div>\r\n      {eventGroups.map((subCols: CourseEvent[][]) =>\r\n        subCols.map((subCol: CourseEvent[], subColIdx) =>\r\n          subCol.map((ev: CourseEvent) => {\r\n            const { start, end } = ev.time;\r\n            if (\r\n              getTimeOfDay(end) <= getTimeOfDay(timeStart) ||\r\n              getTimeOfDay(start) >= getTimeOfDay(timeEnd)\r\n            )\r\n              return null;\r\n            else\r\n              return (\r\n                <EventItem\r\n                  key={ev.info.id}\r\n                  info={ev}\r\n                  leftPercent={subColIdx / subCols.length}\r\n                  widthPercent={\r\n                    expandWidth(ev, subColIdx, subCols) / subCols.length\r\n                  }\r\n                />\r\n              );\r\n          })\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// <div>\r\n//   {/* <div\r\n//       className=\"event-box\"\r\n//       style={{ top: \"20px\", left: \"0%\", height: 30, width: \"22%\" }}\r\n//     ></div>\r\n//     <div\r\n//       className=\"event-box\"\r\n//       style={{ top: \"20px\", left: \"25%\", height: 100, width: \"22%\" }}\r\n//     ></div>\r\n//     <div\r\n//       className=\"event-box\"\r\n//       style={{ top: \"20px\", left: \"50%\", height: 30, width: \"22%\" }}\r\n//     ></div>\r\n//     <div\r\n//       className=\"event-box\"\r\n//       style={{ top: \"20px\", left: \"75%\", height: 30, width: \"22%\" }}\r\n//     ></div> */}\r\n// </div>\r\n// <div>\r\n//   <div\r\n//     className=\"event-box\"\r\n//     style={{\r\n//       top: sizeToString(testEvent!.top),\r\n//       left: \"0%\",\r\n//       height: sizeToString(testEvent!.height),\r\n//       width: \"100%\",\r\n//     }}\r\n//   ></div>\r\n// </div>\r\n// <div></div>\r\n// <div></div>\r\n// <div></div>\r\n// <div></div>\r\n// <div></div>\r\n","import { useMemo } from \"react\";\r\nimport \"../styles/Timetable.scss\";\r\nimport styled from \"styled-components\";\r\nimport DayColumn from \"./DayColumn\";\r\nimport { Course, CourseEvent, Size, TimetableState } from \"../types\";\r\nimport { mapCourseToDayOfWeek, sizeToString } from \"../utils/TimetableUtils\";\r\nimport { format, eachMinuteOfInterval, roundToNearestMinutes } from \"date-fns\";\r\nimport { TimetableStateContext } from \"../contexts/TimetableContext\";\r\n\r\n/**\r\n * Use `undefined` for 1-hour precision,\r\n * @see https://date-fns.org/v2.25.0/docs/roundToNearestMinutes\r\n */\r\nconst minutePrecision = {\r\n  nearestTo: 30,\r\n};\r\n\r\nconst defaultDays = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst TimetableWrapper = styled.div`\r\n  max-height: ${({ maxHeight }: { maxHeight: string }) => maxHeight};\r\n`;\r\nconst Wrapper = styled.div`\r\n  height: ${({ height }: { height: string }) => height};\r\n`;\r\n\r\n/**\r\n *\r\n * @param courses - Array of courses\r\n * @param timeInterval - The start and end time with precision equals `minutePrecision`.\r\n * For example, if `timeInterval.start = 07:12:00` and `minutePrecision = 15`\r\n * => `roundedTimeInterval.start = 07:15:00`\r\n * @param weekStartOnSunday\r\n * @param minutesPerCell\r\n * @param cellHeight\r\n */\r\nexport default function Timetable({\r\n  courses = [],\r\n  timeStart,\r\n  timeEnd,\r\n  weekStartOnSunday,\r\n  minutesPerCell,\r\n  cellHeight,\r\n}: {\r\n  courses: Course[];\r\n  timeStart: Date;\r\n  timeEnd: Date;\r\n  weekStartOnSunday: boolean;\r\n  minutesPerCell: number;\r\n  cellHeight: Size;\r\n}) {\r\n  const days = defaultDays;\r\n  const dayColumns = mapCourseToDayOfWeek(courses);\r\n  const roundedStart = roundToNearestMinutes(timeStart, minutePrecision);\r\n  const roundedEnd = roundToNearestMinutes(timeEnd, minutePrecision);\r\n  const timemarks = eachMinuteOfInterval(\r\n    { start: roundedStart, end: roundedEnd },\r\n    { step: minutesPerCell }\r\n  );\r\n  const totalHeight = {\r\n    value: cellHeight.value * timemarks.length,\r\n    unit: cellHeight.unit,\r\n  };\r\n  // Move Sunday to the back\r\n  if (!weekStartOnSunday) {\r\n    days.push(days.shift()!);\r\n    dayColumns.push(dayColumns.shift()!);\r\n  }\r\n\r\n  const timetableState = useMemo(\r\n    (): TimetableState => ({\r\n      timeStart: roundedStart,\r\n      timeEnd: roundedEnd,\r\n      minutesPerVertUnit: minutesPerCell / cellHeight.value,\r\n      vertUnit: cellHeight.unit,\r\n    }),\r\n    [roundedStart, roundedEnd, minutesPerCell, cellHeight]\r\n  );\r\n\r\n  return (\r\n    <TimetableStateContext.Provider value={timetableState}>\r\n      <TimetableWrapper\r\n        className=\"timetable\"\r\n        maxHeight={sizeToString(totalHeight)}\r\n      >\r\n        <Header days={days} />\r\n        <Timeline timemarks={timemarks} height={totalHeight} />\r\n        <div className=\"timetable-body\">\r\n          <Grid\r\n            rowCount={timemarks.length}\r\n            columnCount={days.length}\r\n            height={totalHeight}\r\n          />\r\n          <EventGrid dayColumns={dayColumns} />\r\n        </div>\r\n      </TimetableWrapper>\r\n    </TimetableStateContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Header({ days }: { days: String[] }) {\r\n  return (\r\n    <div className=\"timetable-header\">\r\n      {days.map((value, i) => (\r\n        <div key={i}>{value}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Timeline({ timemarks, height }: { timemarks: Date[]; height: Size }) {\r\n  return (\r\n    <Wrapper className=\"timeline\" height={sizeToString(height)}>\r\n      {timemarks.map((date, i) => (\r\n        <div key={i}>{format(date, \"HH:mm\")}</div>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nfunction Grid({\r\n  rowCount,\r\n  columnCount,\r\n  height,\r\n}: {\r\n  rowCount: number;\r\n  columnCount: number;\r\n  height: Size;\r\n}) {\r\n  const cells = [];\r\n  for (let i = 0; i < rowCount; i++) {\r\n    cells.push(<div key={i}></div>);\r\n  }\r\n  const cols = [];\r\n  for (let i = 0; i < columnCount; i++) {\r\n    cols.push(<div key={i}>{cells}</div>);\r\n  }\r\n  return (\r\n    <Wrapper className=\"timetable-grid\" height={sizeToString(height)}>\r\n      {cols}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nfunction EventGrid({ dayColumns }: { dayColumns: CourseEvent[][] }) {\r\n  return (\r\n    <div className=\"event-grid\">\r\n      {dayColumns.map((events, i) => (\r\n        <DayColumn key={i} events={events} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"../styles/App.scss\";\r\nimport Timetable from \"./Timetable\";\r\nimport { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { Course } from \"../types\";\r\nimport { setOnly } from \"../utils/TimeUtils\";\r\n\r\nconst timetableDefaultConfig = {\r\n  timeStart: setOnly({ hour: 7, min: 10 }),\r\n  timeEnd: setOnly({ hour: 17 }),\r\n  weekStartOnSunday: false,\r\n  minutesPerCell: 60,\r\n  cellHeight: { value: 3, unit: \"rem\" },\r\n};\r\n\r\nconst mockCourses = [\r\n  {\r\n    info: { id: \"1234\", name: \"c1\", color: \"blue\" },\r\n    intervals: [\r\n      {\r\n        start: setOnly({ day: 1, hour: 8, min: 0 }),\r\n        end: setOnly({ day: 1, hour: 10 }),\r\n      },\r\n      {\r\n        start: setOnly({ day: 3, hour: 8 }),\r\n        end: setOnly({ day: 3, hour: 11 }),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    info: { id: \"4567\", name: \"c2\", color: \"green\" },\r\n    intervals: [\r\n      {\r\n        start: setOnly({ day: 1, hour: 9 }),\r\n        end: setOnly({ day: 1, hour: 11 }),\r\n      },\r\n      {\r\n        start: setOnly({ day: 2, hour: 9 }),\r\n        end: setOnly({ day: 2, hour: 10 }),\r\n      },\r\n      {\r\n        start: setOnly({ day: 2, hour: 1 }),\r\n        end: setOnly({ day: 2, hour: 2 }),\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  const [courses, setCourses] = useState([]);\r\n  const [selectedCourses, setSelectedCourses] = useState<Course[]>([]);\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <nav>\r\n          <div className=\"title\">\r\n            {/* <svg\r\n              className=\"logo\"\r\n              width=\"54\"\r\n              height=\"54\"\r\n              viewBox=\"0 0 54 54\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\" />\r\n            </svg> */}\r\n            {/* <img className=\"logo\" src={logo} alt=\"Logo\" /> */}\r\n            <span>Course Scheduler</span>\r\n          </div>\r\n          <a\r\n            className=\"github\"\r\n            href=\"https://github.com/phineasla/course-scheduler\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} size=\"2x\" />\r\n          </a>\r\n        </nav>\r\n      </header>\r\n      {/* <Timetable courses={selectedCourses} {...timetableDefaultConfig} /> */}\r\n      <Timetable courses={mockCourses} {...timetableDefaultConfig} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}